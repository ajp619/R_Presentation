# residuals
points(child, lm1$residuals, pch=20, col="red")
plot(parent~child, pch=20, col="grey")
points(child, lm1$fitted.values, pch=19, col="blue")
# residuals
plot(parent~child, pch=20, col="grey", ylim=c(0, 80))
points(child, lm1$fitted.values, pch=19, col="blue")
points(child, lm1$residuals, pch=20, col="red")
library(UsingR)
data(galton)
df <- data.frame(x=galton$child, y=galton$parent)
head(df)
head(galton)
source('~/.active-rstudio-document', echo=TRUE)
sum((lm1$coefficient[2]*x + lm1$coefficient[2]) + lm1$residuals)
source('~/.active-rstudio-document', echo=TRUE)
sum(-1*(lm1$coefficient[2]*x + lm1$coefficient[2])^2 + lm1$residuals)
sum(-1*(lm1$coefficient[2]*x + lm1$coefficient[2]) + lm1$residuals)
?lm
res <- y - (lm1$coefficient[2]*x + lm1$coefficient[2])
res - lm1$residuals
res <- y - (lm1$coefficient[2]*x + lm1$coefficient[1])
res - lm1$residuals
round(sum(res - lm1$residuals), digits=2)
round(sum(res - lm1$residuals), digits=5)
source('~/.active-rstudio-document', echo=TRUE)
newDf <- data.frame(x=rep(NA,1e6), y=rep(NA,1e6))
newDf$x <- rnorm(1e6,mean=mean(df$y), sd=sd(df$y))
newDf$y <- lm1$coefficients[1] + lm1$coefficients[2]*newDf$x + rnorm(1e6, sd=sd(lm1$residuals))
smoothScatter(newDf$x, newDf$y)
abline(lm1,col="red", lwd=3)
newDf <- data.frame(x=rep(NA,1e6), y=rep(NA,1e6))
newDf$x <- rnorm(1e6,mean=mean(df$y), sd=sd(df$y))
# generate new y data of the form b + m*
newDf$y <- lm1$coefficients[1] + lm1$coefficients[2]*newDf$x + 0*rnorm(1e6, sd=sd(lm1$residuals))
smoothScatter(newDf$x, newDf$y)
abline(lm1,col="red", lwd=3)
?sample
source('~/.active-rstudio-document', echo=TRUE)
?sample
a <- 1:10
sample(a, size=5, replace=F)
sample(a, size=11, replace=F)
sample(a, size=11, replace=T)
source('~/.active-rstudio-document', echo=TRUE)
set.seed(123)
df.s1 <- df.pop[sample(1:n, size=50, replace=F),]  # sample pulls from the supplied vector with equal probability
lm.s1 <- lm(df.s1$y~sf.s1$x)
plot(df.s1$x, df.s1$y, pch=19, col="blue")
lines(lm.s1, col="red")
lm.s1 <- lm(df.s1$y~df.s1$x)
plot(df.s1$x, df.s1$y, pch=19, col="blue")
lines(lm.s1, col="red")
abline(lm.s1, col="red")
source('~/.active-rstudio-document', echo=TRUE)
abline(lm.orig, col="black")
smoothScatter(df.pop$x, df.pop$y)
abline(lm.orig,col="red", lwd=3)
abline(lm(df.pop$y~df.pop$x), col=5)
set.seed(925)
n=1e6  # size of population
df.pop <- data.frame(x=rep(NA,n), y=rep(NA,n))
df.pop$x <- rnorm(n,mean=mean(df$x), sd=sd(df$x))
# generate new y data of the form lm1-intercept + lm1-slope*newX + noise(with same sd as lm1)
df.pop$y <- lm.orig$coefficients[1] + lm.orig$coefficients[2]*df.pop$x + rnorm(n, sd=sd(lm.orig$residuals))
smoothScatter(df.pop$x, df.pop$y)
abline(lm.orig,col="red", lwd=4)
# just to make sure we did that right
lm.comp <- lm(df.pop$y~df.pop$x)
abline(lm.comp, col=5)
lm.orig$coeff
lm.comp$coeff
df.s2 <- df.pop[sample(1:n, size=50, replace=F),]
lm.s2 <- lm(df.s2$y~df.s2$x)
plot(df.s2$x, df.s2$y, pch=19, col="blue")
abline(lm.s2, col="red")
abline(lm.orig, col="black")
smoothScatter(df.pop$x, df.pop$y)
for(i in 1:nSamples){abline(lm.samples[i], col="black")}
abline(lm.pop, col="red", lwd=3)
source('~/.active-rstudio-document', echo=TRUE)
nSamples <- 100
lm.samples <- vector(nSamples, mode="list")
for(i in 1:nSamples){
samp <- df.pop[sample(1:n, size=50, replace=F),]
lm.samples[i] <- lm(samp$y~samp$x)  # we are creating a list of linear models
}
smoothScatter(df.pop$x, df.pop$y)
for(i in 1:nSamples){abline(lm.samples[i], col="black")}
abline(lm.pop, col="red", lwd=3)
nSamples <- 100
lm.samples <- vector(nSamples, mode="list")
i <- 1
samp <- df.pop[sample(1:n, size=50, replace=F),]
lm.samples[i] <- lm(samp$y~samp$x)  # we are creating a list of linear models
nSamples <- 100
lm.samples <- vector(nSamples, mode="list")
for(i in 1:nSamples){
samp <- df.pop[sample(1:n, size=50, replace=F),]
lm.samples[[i]] <- lm(samp$y~samp$x)  # we are creating a list of linear models
}
smoothScatter(df.pop$x, df.pop$y)
for(i in 1:nSamples){abline(lm.samples[[i]], col="black")}
abline(lm.pop, col="red", lwd=3)
?confint
summary(lm.s2)
summary(lm.s2)$coeff
confint(lm.s2, level=0.95)
lm.s2$coeff
plot(lm.orig$x, lm.orig$y)
plot(df.orig$x, df.orig$y)
plot(df$x, df$y)
abline(v=70)
par(mar=c(4,4,0,2))
plot(1:10, type="n", xlim=c(0,1.5), ylim=c(0,100),
xlab="Coefficient Values", ylab="Replication")
for(i in 1:nSamples){
ci <- confint(lm.samples[[i]])
color="red"
if((ci[2,1] < lm.pop$coeff[2]) & (lm.pop$coeff[2 < ci[2,2])){color="grey"}
segments(ci[2,1], i, ci[2,2], i, col=color, lwd=3)
}
abline(v=lm.pop$coeff[2])
par(mar=c(4,4,0,2))
plot(1:10, type="n", xlim=c(0,1.5), ylim=c(0,100),
xlab="Coefficient Values", ylab="Replication")
for(i in 1:nSamples){
ci <- confint(lm.samples[[i]])
color="red"
if((ci[2,1] < lm.pop$coeff[2]) & (lm.pop$coeff[2] < ci[2,2])){color="grey"}
segments(ci[2,1], i, ci[2,2], i, col=color, lwd=3)
}
abline(v=lm.pop$coeff[2])
par(mar=c(4,4,0,2))
plot(1:10, type="n", xlim=c(0,1.5), ylim=c(0,100),
xlab="Coefficient Values", ylab="Replication")
for(i in 1:nSamples){
ci <- confint(lm.samples[[i]])
color="red"
if((ci[2,1] < lm.pop$coeff[2]) & (lm.pop$coeff[2] < ci[2,2])){color="grey"}
segments(ci[2,1], i, ci[2,2], i, col=color, lwd=3)
}
abline(v=lm.pop$coeff[2], lwd=3)
source('~/.active-rstudio-document', echo=TRUE)
confint(lm.s2, level=0.95)
par(mar=c(4,4,0,2))
plot(1:10, type="n", xlim=c(0,1.5), ylim=c(0,100),
xlab="Coefficient Values", ylab="Replication")
for(i in 1:nSamples){
ci <- confint(lm.samples[[i]])
color="red"
if((ci[2,1] < lm.pop$coeff[2]) & (lm.pop$coeff[2] < ci[2,2])){color="grey"}
segments(ci[2,1], i, ci[2,2], i, col=color, lwd=3)
}
abline(v=lm.pop$coeff[2], lwd=3)
ci.level <- 0.95
lm.s2$coeff
confint(lm.s2, level=ci.level)
# But what does this mean?
par(mar=c(4,4,0,2))
plot(1:10, type="n", xlim=c(0,1.5), ylim=c(0,100),
xlab="Coefficient Values", ylab="Replication")
for(i in 1:nSamples){
ci <- confint(lm.samples[[i]], level=ci.level)
color="red"
if((ci[2,1] < lm.pop$coeff[2]) & (lm.pop$coeff[2] < ci[2,2])){color="grey"}
segments(ci[2,1], i, ci[2,2], i, col=color, lwd=3)
}
abline(v=lm.pop$coeff[2], lwd=3)
ci.level <- 0.90
lm.s2$coeff
confint(lm.s2, level=ci.level)
# But what does this mean?
par(mar=c(4,4,0,2))
plot(1:10, type="n", xlim=c(0,1.5), ylim=c(0,100),
xlab="Coefficient Values", ylab="Replication")
for(i in 1:nSamples){
ci <- confint(lm.samples[[i]], level=ci.level)
color="red"
if((ci[2,1] < lm.pop$coeff[2]) & (lm.pop$coeff[2] < ci[2,2])){color="grey"}
segments(ci[2,1], i, ci[2,2], i, col=color, lwd=3)
}
abline(v=lm.pop$coeff[2], lwd=3)
ci.level <- 0.80
lm.s2$coeff
confint(lm.s2, level=ci.level)
# But what does this mean?
par(mar=c(4,4,0,2))
plot(1:10, type="n", xlim=c(0,1.5), ylim=c(0,100),
xlab="Coefficient Values", ylab="Replication")
for(i in 1:nSamples){
ci <- confint(lm.samples[[i]], level=ci.level)
color="red"
if((ci[2,1] < lm.pop$coeff[2]) & (lm.pop$coeff[2] < ci[2,2])){color="grey"}
segments(ci[2,1], i, ci[2,2], i, col=color, lwd=3)
}
abline(v=lm.pop$coeff[2], lwd=3)
ci.level <- 0.95
lm.s2$coeff
confint(lm.s2, level=ci.level)
# But what does this mean?
par(mar=c(4,4,0,2))
plot(1:10, type="n", xlim=c(0,1.5), ylim=c(0,100),
xlab="Coefficient Values", ylab="Replication")
for(i in 1:nSamples){
ci <- confint(lm.samples[[i]], level=ci.level)
color="red"
if((ci[2,1] < lm.pop$coeff[2]) & (lm.pop$coeff[2] < ci[2,2])){color="grey"}
segments(ci[2,1], i, ci[2,2], i, col=color, lwd=3)
}
abline(v=lm.pop$coeff[2], lwd=3)
ci.level <- 0.80
lm.s2$coeff
confint(lm.s2, level=ci.level)
# But what does this mean?
par(mar=c(4,4,0,2))
plot(1:10, type="n", xlim=c(0,1.5), ylim=c(0,100),
xlab="Coefficient Values", ylab="Replication")
for(i in 1:nSamples){
ci <- confint(lm.samples[[i]], level=ci.level)
color="red"
if((ci[2,1] < lm.pop$coeff[2]) & (lm.pop$coeff[2] < ci[2,2])){color="grey"}
segments(ci[2,1], i, ci[2,2], i, col=color, lwd=3)
}
abline(v=lm.pop$coeff[2], lwd=3)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?text
set.seed(123)
df.s1 <- df.pop[sample(1:n, size=50, replace=F),]  # sample pulls from the supplied vector with equal probability
lm.s1 <- lm(df.s1$y~df.s1$x)
plot(df.s1$x, df.s1$y, pch=19, col="blue")
abline(lm.s1, col="red")
abline(lm.pop, col="black")
text(x=70, y=65, "Black = population")
?legend
?vector
??plot symbols
??symbols
?points
plot( 0:15, 0:15, type='n' )
points( (0:255)%% 16, (0:255) %/% 16, pch=0:255, font=5 )
x <- 1:25
x
y = 5
plot(x, y, pch = x)
rep(5)
rep(5,5)
rep(5, len(x))
rep(5, length(x))
plot(x, rep(5, length(x)), pch=x)
?plot
plot(x, rep(5, length(x)), pch=x, labs=x)
y <- rep(2, length(x))
plot(x,y,pch=x)
text(x,y+.5, labs=x)
plot(x,y,pch=x)
textxy(x,y+.5, labs=x)
text(x, y + .5)
plot(1:10, type="n", xlim=c(0,1.5), ylim=c(0,100),
xlab="Coefficient Values", ylab="Replication")
for(i in 1:nSamples){
ci <- confint(lm.samples[[i]], level=ci.level)
color="red"
if((ci[2,1] < lm.pop$coeff[2]) & (lm.pop$coeff[2] < ci[2,2])){color="grey"}
segments(ci[2,1], i, ci[2,2], i, col=color, lwd=3)
}
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(UsingR)
data(galton)  # galton: Galton's height data for parents and children
df <- data.frame(x=galton$child, y=galton$parent)
lm.orig <- lm(df$y~df$x)
plot(df$x, df$y, pch=19, col="blue")
abline(lm.orig, col="red", lwd=3)
lm.orig <- lm(df$y~df$x)
plot(df$x, df$y, pch=19, col="blue")
abline(lm.orig, col="red", lwd=3)
names(lm.orig)
attach(df)
lm.orig$coefficients
# we can be more specific with the line
plot(y~x, pch=15, col=4)  # same plot as above, slightly differeny syntax
abline(lm.orig$coefficients, col=2, lwd=4)
# another way
plot(y~x, pch=17, col=4)
abline(lm.orig$coefficients[1], lm.orig$coefficients[2], col=5, lwd=3)
# fitted.values
plot(y~x, pch=20, col="grey")
abline(lm.orig, col=5)
points(x, lm.orig$fitted.values, pch=19, col="blue")
# residuals
plot(y~x, pch=20, col="grey", ylim=c(0, 80))
points(x, lm.orig$fitted.values, pch=19, col="blue")
points(x, lm.orig$residuals, pch=20, col="red")
# what are residuals?
y.pred <- lm.orig$coefficient[2]*x + lm.orig$coefficient[1]
res <- y - y.pred  # y(actual) - y(predicted)
round(sum(res - lm.orig$residuals), digits=5)  # if this is zero, they are the same
detach(df)
names(lm.orig)
attach(df)
rm(x,y)
source('~/.active-rstudio-document', echo=TRUE)
plot(1:10, type="n", xlim=c(0,1.5), ylim=c(0,100),
xlab="Coefficient Values", ylab="Replication")
plot(1:10)
plot(1:10, type="n")
plot(1:50, type="n", xlim=c(0,1.5), ylim=c(0,100))
plot(1, type="n", xlim=c(0,1.5), ylim=c(0,100))
plot(type="n", xlim=c(0,1.5), ylim=c(0,100))
plot(1, type="n", xlim=c(0,1.5), ylim=c(0,100))
plot(1)
plot(1, type="n", xlim=c(0,1.5), ylim=c(0,100))
?plot
lm.samples
lm.samples[1]
lm.samples[[1]]
lm.samples[1][1]
class(lm.samples[1])
class(lm.samples[[1]])
class(lm.samples[1])
class(lm.samples[[1]])
ci.level <- 0.95
lm.s2$coeff
confint(lm.s2, level=ci.level)
# But what does this mean?
par(mar=c(4,4,0,2))
plot(1:10, type="n", xlim=c(0,1.5), ylim=c(0,100), # 1:10 is arbitrary
xlab="Coefficient Values", ylab="Replication")
for(i in 1:nSamples){
ci <- confint(lm.samples[[i]], level=ci.level)
color="red"
if((ci[2,1] < lm.pop$coeff[2]) & (lm.pop$coeff[2] < ci[2,2])){color="grey"}
segments(ci[2,1], i, ci[2,2], i, col=color, lwd=3)
}
abline(v=lm.pop$coeff[2], lwd=3)
par(mfrow = c(1,2))
lm.orig <- lm(df$y~df$x)
plot(df$x, df$y, pch=19, col="blue")
abline(lm.orig, col="red", lwd=3)
par(mfcol = c(2,1))
lm.orig <- lm(df$y~df$x)
plot(df$x, df$y, pch=19, col="blue")
abline(lm.orig, col="red", lwd=3)
names(lm.orig)
attach(df)
lm.orig$coefficients
# we can be more specific with the line
plot(y~x, pch=15, col=4)  # same plot as above, slightly differeny syntax
abline(lm.orig$coefficients, col=2, lwd=4)
# another way
plot(y~x, pch=17, col=4)
abline(lm.orig$coefficients[1], lm.orig$coefficients[2], col=5, lwd=3)
# fitted.values
plot(y~x, pch=20, col="grey")
abline(lm.orig, col=5)
points(x, lm.orig$fitted.values, pch=19, col="blue")
# residuals
plot(y~x, pch=20, col="grey", ylim=c(0, 80))
points(x, lm.orig$fitted.values, pch=19, col="blue")
points(x, lm.orig$residuals, pch=20, col="red")
# what are residuals?
y.pred <- lm.orig$coefficient[2]*x + lm.orig$coefficient[1]
res <- y - y.pred  # y(actual) - y(predicted)
round(sum(res - lm.orig$residuals), digits=5)  # if this is zero, they are the same
detach(df)
par(mfcol = c(3,1))
names(lm.orig)
attach(df)
lm.orig$coefficients
# we can be more specific with the line
plot(y~x, pch=15, col=4)  # same plot as above, slightly differeny syntax
abline(lm.orig$coefficients, col=2, lwd=4)
# another way
plot(y~x, pch=17, col=4)
abline(lm.orig$coefficients[1], lm.orig$coefficients[2], col=5, lwd=3)
# fitted.values
plot(y~x, pch=20, col="grey")
abline(lm.orig, col=5)
points(x, lm.orig$fitted.values, pch=19, col="blue")
par(mfcol=c(1,1))
7/5
8/1.4
8/5.7
?confint
ci.level <- 0.90
lm.s2$coeff
confint(lm.s2, level=ci.level)
par(mar=c(4,4,0,2))
plot(1:10, type="n", xlim=c(0,1.5), ylim=c(0,100), # 1:10 is arbitrary
xlab="Coefficient Values", ylab="Replication")
for(i in 1:nSamples){
ci <- confint(lm.samples[[i]], level=ci.level)
color="red"
# Does the ci contain the actual slope? If so color = grey
if((ci[2,1] < lm.pop$coeff[2]) & (lm.pop$coeff[2] < ci[2,2])){color="grey"}
segments(ci[2,1], i, ci[2,2], i, col=color, lwd=3)
}
abline(v=lm.pop$coeff[2], lwd=3)
ci.level <- 0.85
lm.s2$coeff
confint(lm.s2, level=ci.level)
par(mar=c(4,4,0,2))
plot(1:10, type="n", xlim=c(0,1.5), ylim=c(0,100), # 1:10 is arbitrary
xlab="Coefficient Values", ylab="Replication")
for(i in 1:nSamples){
ci <- confint(lm.samples[[i]], level=ci.level)
color="red"
# Does the ci contain the actual slope? If so color = grey
if((ci[2,1] < lm.pop$coeff[2]) & (lm.pop$coeff[2] < ci[2,2])){color="grey"}
segments(ci[2,1], i, ci[2,2], i, col=color, lwd=3)
}
abline(v=lm.pop$coeff[2], lwd=3)
1/2
?install.packages
read.csv("../Data Sets/san diego research file/ca2012entities_csv.txt", header=True)
read.csv("../Data Sets/san diego research file/ca2012entities_csv.txt", header=TRUE)
read.csv("../Data Sets/san diego research file/ca2012entities_csv.txt", header=TRUE) -> schools
head(schools)
sapply(schools[1,], class)
attach(schools)
table(Zip.Code)
max(table(schools))
max(table(Zip.Code))
hist(table(Zip.Code))
len(table(Zip.Code))
length(table(Zip.Code))
?unique
length(unique(Zip.Code))
plot(table(Zip.Code))
plot(table(Zip.Code), xlim=c(90000,98000))
summary(schools)
read.csv("../Data Sets/san diego research file/ca2012_all_37_csv_v3.txt", header=TRUE)
test_scores <- read.csv("../Data Sets/san diego research file/ca2012_all_37_csv_v3.txt", header=TRUE)
summary(test_scores)
?merge
names(schools)
names(test_scores)
m_scores <- merge(test_scores, schools, by="School.Code")
?sample
sample(1:10, 5)
length(test_scores)
dim(test_scores)
ts_trunc <- test_scores[sample(1:dim(test_scores)[1], 500),]
m_scores <- merge(ts_trunc, schools, by="School.Code")
head(m_scores)
?merge
names(test_scores)
x <- sample(1:10, replace=T, 100)
table(x)
x <- data.frame(a=sample(1:10, replace=T, 100))
a:j
"a:j"
x <- data.frame(name=c("grace", "piper", "kate", "aaron"), gender="girl", "girl", "girl", "boy")
y <- data.frame(name=c("grace", "piper", "kate", "aaron"), age=c(7, 5, 41, 42))
x <- data.frame(name=c("grace", "piper", "kate", "aaron"), gender.code=c(1,1,1,0))
z <- data.frame(gender.code=c(0,1), gender="boy", "girl")
m <- merge(x, z, by="gender.code")
m
x
z
z <- data.frame(gender.code=c(0,1), gender=c("boy", "girl")
)
z
m <- merge(x, z, by="gender.code")
m
subgroups <- read.csv("../Data Sets/san diego research file/Subgroups.txt", header=T)
summary(subgroups)
names(m_scores)
sum(m_scores$County.Code.x == m_scores$County.Code.y)
m_scores$County.Name
sum(m_scores$County.Name == "San Diego")
sum(m_scores$County.Code.x == m_scores$County.Code.y)
names(subgroups)
names(schools)
sd_schools <- schools[schools$County.Name == "San Diego", ]
m_scores <- merge(ts_trunc, sd_schools, by="School.Code")
m_scores[1:50,]
library(UsingR)
data(galton)  # galton: Galton's height data for parents and children
df <- data.frame(x=galton$child, y=galton$parent)
summary(cars)
plot(cars)
source('~/.active-rstudio-document', echo=TRUE)
summary(cars)
summary(cars)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
summary(cars)
summary(cars)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
summary(cars)
source('~/.active-rstudio-document', echo=TRUE)
summary(cars)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
summary(cars)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
summary(cars)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
